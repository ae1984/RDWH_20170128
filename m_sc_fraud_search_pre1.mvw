create materialized view U1.M_SC_FRAUD_SEARCH_PRE1
build deferred
refresh force on demand
as
select   /*+ parallel(10) */
         t.rfo_client_id
         ,max(a.reg_date) as reg_kaspikz_date
         ,avg(case when b.pay_date>=trunc(sysdate)-30 and b.pay_date < trunc(sysdate) then b.pay_amount end) as avg_sum_pay_kspkz_30_d
         ,count(distinct case when b.pay_date>=add_months(trunc(sysdate),-6) and b.pay_date < trunc(sysdate) then trunc(b.pay_date,'mm') end) as count_month_kaspikz_6_m
         ,count(distinct case when b.pay_date>=trunc(sysdate)-30 and b.pay_date < trunc(sysdate) then b.pay_info_id end) as count_pay_kspkz_30_d
         ,count(distinct case when b.pay_date>=add_months(trunc(sysdate),-6) and b.pay_date < trunc(sysdate) then b.category_name end) as count_serv_kspkz_6_m ---
         ,count(distinct case when b.pay_date>=add_months(trunc(sysdate),-6) and b.pay_date < trunc(sysdate) and b.category_name = 'КОМУСЛУГИ' then trunc(b.pay_date,'mm') end) as kommunalka_kaspikz_6_m
    from u1.V_CLIENT_RFO_BY_ID t
    left join (
      select  t.user_id
              ,t.rfo_id
              ,a.date_of_birth
              ,a.reg_date
      from u1.M_KASPIKZ_USERS_ALL t
      left join u1.M_KASPIKZ_USERS a on a.id = t.user_id
    ) a on a.rfo_id = to_char(t.rfo_client_id) --and a.reg_date <= t.date_create
    left join u1.M_KASPIKZ_PAY b on b.rfo_client_id = t.rfo_client_id --and b.pay_date<=t.date_create
    group by t.rfo_client_id;
grant select on U1.M_SC_FRAUD_SEARCH_PRE1 to LOADDB;


