create materialized view U1.M_MATRIX_KDN_2
build deferred
refresh force on demand
as
select /*+ parallel(15) */
       f.rfo_contract_id,
       coalesce(b.contract_number, f.contract_number) as contract_number,
       b.rbo_contract_id,
       f.folder_id,
       f.claim_id,
       f.product_type,
       f.product,
       f.is_categ_a, /*f.is_categ_b,*/
       f.is_client_new_by_con,
       f.is_credit_issued,
       case when p1.rfo_contract_id is not null then 'PKB PRI PRESENT' else 'PKB PRI ABSENT' end as is_pkb_pri_present,
       case when p1.pkb_primary_active_cons > 0 then 'PKB PRI WITH ACT CONS' else 'PKB PRI W/O ACT CONS' end as is_pkb_act_cons_present,
       case when p1.active_kaspi_cons_cnt > 0 then 'PKB PRI WITH ACT KASPI CONS' else 'PKB PRI W/O ACT KASPI CONS' end as is_pkb_with_act_kaspi_cons,
       case when p1.active_kaspi_cons_cnt >= p1.pkb_primary_active_cons then 'PKB PRI WITH ACT ONLY KASPI CONS'
            else 'PKB PRI W/O ACT ONLY KASPI CONS' end as is_pkb_with_act_only_kas_cons,
       case when p2.rfo_contract_id is not null then 'PKB STD/EXT PRESENT' else 'PKB STD/EXT ABSENT' end as is_pkb_std_ext_present,
       case when g.gcvp_report_id is not null then 'GCVP PRESENT' else 'GCVP ABSENT' end as is_gcvp_present,
       case when g.gcvp_salary = 0 then 'GCVP SAL = 0' else 'GCVP SAL > 0' end as is_gcvp_sal_above_zero,
       case when kf.form_client_id is not null then 'FORM PRESENT' else 'FORM ABSENT' end as is_form_present,
       case when kc.rfo_contract_id is not null then 'KASPI OTHER CARDS PMT PRESENT'
            else 'KASPI OTHER CARDS PMT ABSENT' end as is_kaspi_oth_cards_pmt_present,
       case when kr.rfo_contract_id is not null then 'KASPI OTHER CREDITS PMT PRESENT'
            else 'KASPI OTHER CREDITS PMT ABSENT' end as is_kaspi_oth_creds_pmt_present,
       case when kp.pmt_avg is not null /*or kp.pmt_avg_07 is not null*/ or kp.pmt_avg_10 is not null then 'PMT PRESENT'
                 else 'PMT ABSENT' end as is_pmt_present,
       round(months_between(b.date_plan_end, b.start_date)) as contract_term_mon,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) <= sv.salary * 2 then 1
                 else 0 end as is_kdn_regulated_form_gcvp_max,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.pmt_avg,0) + /*coalesce(kp.pmt_avg_07,0) +*/ coalesce(kp.pmt_avg_10,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5 -- доходы (макс с анкеты и ГЦВП)
            else round((coalesce(pmt.sc_pmt_rbo, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5
            end
       end as kdn_form_gcvp_max,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.pmt_avg,0) + /*coalesce(kp.pmt_avg_07,0) +*/ coalesce(kp.pmt_avg_10,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100) -- доходы (макс с анкеты и ГЦВП)
            else round((coalesce(pmt.sc_pmt_rbo, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100)
            end
       end as kdn_form_gcvp_max_2,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
               round((/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                      coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                      coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5 -- доходы (макс с анкеты и ГЦВП)
            end as kdn_form_gcvp_max_wo_pmt,

       coalesce(greatest(kf.inc_all2, g.gcvp_salary),kf.inc_all2, g.gcvp_salary) as form_gcvp_max_income,

       case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
            ((coalesce(kp.pmt_avg,0) + /*coalesce(kp.pmt_avg_07,0) +*/ coalesce(kp.pmt_avg_10,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))   -- платежи ПКБ не каспи
                    ) -- доходы (макс с анкеты и ГЦВП)
       else ((coalesce(pmt.sc_pmt_rbo, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)))
       end as pmt_all,


       case when g.gcvp_salary <= sv.salary * 2 then 1 else 0 end as is_kdn_regulated_gcvp,

       case when g.gcvp_salary > 0 then
              case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.pmt_avg,0) + /*coalesce(kp.pmt_avg_07,0) +*/ coalesce(kp.pmt_avg_10,0) + -- платеж по самому кредиту (по траншу или 10% по картам)
                       coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    g.gcvp_salary * 100 / 5) * 5 -- доходы (ГЦВП)
              else round((coalesce(pmt.sc_pmt_rbo, 0) + -- платеж со скоринга
                       coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0)) /
                   g.gcvp_salary * 100 / 5) * 5
              end
          end as kdn_gcvp,

       case when g.gcvp_salary > 0 then
               round((/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                         coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                         coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    g.gcvp_salary * 100 / 5) * 5 -- доходы (ГЦВП)
            end as kdn_gcvp_wo_pmt,

       g.gcvp_salary as gcvp_income,


       coalesce(kp.pmt_avg, 0) pmt_avg,
       coalesce(kp.pmt_avg_10, 0) pmt_avg_10,
       coalesce(kc.kaspi_other_cards_pmt, 0) kaspi_other_cards_pmt,
       coalesce(kr.kaspi_other_creds_pmt, 0) kaspi_other_creds_pmt,
       coalesce(p2.pkb_pmt_not_kaspi, 0) pkb_pmt_not_kaspi,
       coalesce(pmt.sc_pmt_rbo, 0) sc_pmt_rbo,

       coalesce(kf.inc_all2, 0) form_income_total,
       coalesce(g.gcvp_salary, 0) gcvp_salary,


       pnm.pmt_nom_rate,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               (coalesce(pnm.pmt_nom_rate,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            else (coalesce(pnm.pmt_nom_rate, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100
            end
       end as kdn_form_gcvp_max_nm,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               (coalesce(pnm.pmt_nom_rate,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            else (coalesce(pmt.sc_pmt_rbo, pnm.pmt_nom_rate, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100
            end
       end as kdn_form_gcvp_max_nm2,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
               (/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                      coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                      coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            end as kdn_form_gcvp_max_wo_pmt_nm,

       sv.salary_double


from (
  select 'ОНЛАЙН-КРЕДИТ' as product_type, 'ОНЛАЙН-КРЕДИТ ЭКТ' as product, trunc(f.folder_date_create_mi) as a_date,
         case when f.is_categ_a = 1 then 'КАТЕГОРИЯ А' when f.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when f.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when f.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when f.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when f.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when f.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when f.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         f.claim_id, f.contract_number, f.rfo_client_id, f.contract_amount, f.folder_id, f.form_client_id, f.rfo_contract_id,
         f.rfo_contract_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL f
  where f.process_name = 'ОНЛАЙН КРЕДИТ' and
        f.claim_id is not null and
        f.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd') --to_date('2014-12-08','yyyy-mm-dd')
/*  union all
  select 'ОНЛАЙН-КРЕДИТ' as product_type, 'ОНЛАЙН-КРЕДИТ ЭКТ' as product, trunc(fo.folder_date_create_mi) as a_date,
         case when fo.is_categ_a = 1 then 'КАТЕГОРИЯ А' when fo.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when fo.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when fo.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when fo.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when fo.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when fo.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when fo.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         fo.claim_id, fo.contract_number, fo.rfo_client_id, fo.contract_amount, fo.folder_id, fo.form_client_id, fo.rfo_contract_id,
         fo.claim_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL_ONLINE fo
  where fo.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd') --to_date('2014-12-08','yyyy-mm-dd')*/
  union all
  select f.product_type, f.cr_program_name as product, trunc(f.folder_date_create_mi) as a_date,
         case when f.is_categ_a = 1 then 'КАТЕГОРИЯ А' when f.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when f.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when f.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when f.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when f.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when f.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when f.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         f.claim_id, f.contract_number, f.rfo_client_id, f.contract_amount, f.folder_id, f.form_client_id, f.rfo_contract_id,
         f.rfo_contract_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL f
  where f.process_name != 'ОНЛАЙН КРЕДИТ' and
        f.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd')
) f
left join U1.M_RBO_CONTRACT_BAS b on (b.folder_id_first = f.folder_id and b.contract_number = f.contract_number) --main join
                                     /*--!!!! HARD CODE
                                     or (b.contract_number in ( 'R2639721-004',
                                                                'R9084957-001',
                                                                'R2851196-003',
                                                                'R7549067-003')
                                         and f.contract_number like b.contract_number || '%'
                                         and b.folder_id_first = f.folder_id
                                         )
                                     or (b.contract_number = 'R6553312-005'
                                         and b.folder_id_first = 70619805393
                                         and f.folder_id = 75885234168)

                                     or (b.contract_number = 'R8662152-001'
                                         and b.folder_id_first = 85444001804
                                         and f.folder_id = 89258808031)
                                     --!!!! END OF HARD CODE*/
left join U1.M_RBO_CONTRACT_DEL d on d.rbo_contract_id = b.rbo_contract_id
---
--left join U1.V_FORM_CLIENT_ALL_RFO fc on fc.form_client_id = f.form_client_id --
left join U1.M_MATRIX_KDN_1_PKB_1 p1 on p1.rfo_contract_id = f.rfo_contract_id
left join U1.M_MATRIX_KDN_1_PKB_2 p2 on p2.rfo_contract_id = f.rfo_contract_id
left join U1.M_MATRIX_KDN_1_GCVP g on g.rfo_contract_id = f.rfo_contract_id
--left join U1.M_MATRIX_KDN_1_FORM kf on kf.rfo_contract_id = f.rfo_contract_id
left join U1.M_APP_MINER_FORM_CLIENT kf on kf.app_id = f.rfo_contract_id
left join U1.M_MATRIX_KDN_1_KAS_CARDS kc on kc.rfo_contract_id = f.rfo_contract_id
left join U1.M_MATRIX_KDN_1_KAS_CREDS kr on kr.rfo_contract_id = f.rfo_contract_id
left join U1.M_MATRIX_KDN_1_PMT kp on kp.rfo_contract_id = f.rfo_contract_id
left join U1.T_SALARY_AVERAGE sv on sv.ym_date = trunc(f.a_date,'mm')
left join (select pmt1.folder_id,
                  max(pmt1.sc_pmt_nom_rate) keep (dense_rank last order by pmt1.date_create) as sc_pmt_nom_rate,
                  max(pmt1.sc_pmt_rbo) keep (dense_rank last order by pmt1.date_create) as sc_pmt_rbo
           from u1.M_FOLDER_MO_PMT pmt1
           group by pmt1.folder_id) pmt on pmt.folder_id = f.folder_id
left join U1.M_MATRIX_KDN_1_PMT_NR pnm on pnm.rfo_contract_id = f.rfo_contract_id


--online claim
union all

select /*+ parallel(15) */
       f.rfo_contract_id,
       f.contract_number,
       cast(null as number) as rbo_contract_id,
       f.folder_id,
       f.claim_id,
       f.product_type,
       f.product,
       f.is_categ_a, /*f.is_categ_b,*/
       f.is_client_new_by_con,
       f.is_credit_issued,
       case when p1.claim_id is not null then 'PKB PRI PRESENT' else 'PKB PRI ABSENT' end as is_pkb_pri_present,
       case when p1.pkb_primary_active_cons > 0 then 'PKB PRI WITH ACT CONS' else 'PKB PRI W/O ACT CONS' end as is_pkb_act_cons_present,
       case when p1.active_kaspi_cons_cnt > 0 then 'PKB PRI WITH ACT KASPI CONS' else 'PKB PRI W/O ACT KASPI CONS' end as is_pkb_with_act_kaspi_cons,
       case when p1.active_kaspi_cons_cnt >= p1.pkb_primary_active_cons then 'PKB PRI WITH ACT ONLY KASPI CONS'
            else 'PKB PRI W/O ACT ONLY KASPI CONS' end as is_pkb_with_act_only_kas_cons,
       case when p2.claim_id is not null then 'PKB STD/EXT PRESENT' else 'PKB STD/EXT ABSENT' end as is_pkb_std_ext_present,
       case when g.gcvp_report_id is not null then 'GCVP PRESENT' else 'GCVP ABSENT' end as is_gcvp_present,
       case when g.gcvp_salary = 0 then 'GCVP SAL = 0' else 'GCVP SAL > 0' end as is_gcvp_sal_above_zero,
       case when kf.form_client_id is not null then 'FORM PRESENT' else 'FORM ABSENT' end as is_form_present,
       case when kc.claim_id is not null then 'KASPI OTHER CARDS PMT PRESENT'
            else 'KASPI OTHER CARDS PMT ABSENT' end as is_kaspi_oth_cards_pmt_present,
       case when kr.claim_id is not null then 'KASPI OTHER CREDITS PMT PRESENT'
            else 'KASPI OTHER CREDITS PMT ABSENT' end as is_kaspi_oth_creds_pmt_present,
       case when kp.monthly_pay is not null /*or kp.pmt_avg_07 is not null or kp.pmt_avg_10 is not null*/ then 'PMT PRESENT'
                 else 'PMT ABSENT' end as is_pmt_present,
       kp.term_period as contract_term_mon,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary),kf.inc_all2, g.gcvp_salary) <= sv.salary * 2 then 1
                 else 0 end as is_kdn_regulated_form_gcvp_max,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.monthly_pay,0) + /*coalesce(kp.pmt_avg_07,0) + coalesce(kp.pmt_avg_10,0)*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5 -- доходы (макс с анкеты и ГЦВП)
            else round((coalesce(kp.monthly_pay, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5
            end
       end as kdn_form_gcvp_max,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.monthly_pay,0) + /*coalesce(kp.pmt_avg_07,0) + coalesce(kp.pmt_avg_10,0)*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100) -- доходы (макс с анкеты и ГЦВП)
            else round((coalesce(kp.monthly_pay, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100)
            end
       end as kdn_form_gcvp_max_2,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
               round((/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                      coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                      coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 / 5) * 5 -- доходы (макс с анкеты и ГЦВП)
            end as kdn_form_gcvp_max_wo_pmt,

       coalesce(greatest(kf.inc_all2, g.gcvp_salary),kf.inc_all2, g.gcvp_salary) as form_gcvp_max_income,

       case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
            ((coalesce(kp.monthly_pay,0) + /*coalesce(kp.pmt_avg_07,0) + coalesce(kp.pmt_avg_10,0)*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0)) -- платежи ПКБ не каспи
                    ) -- доходы (макс с анкеты и ГЦВП)
       else ((coalesce(kp.monthly_pay, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)))
       end as pmt_all,


       case when g.gcvp_salary <= sv.salary * 2 then 1 else 0 end as is_kdn_regulated_gcvp,

       case when g.gcvp_salary > 0 then
              case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               round((coalesce(kp.monthly_pay,0) + /*coalesce(kp.pmt_avg_07,0) +coalesce(kp.pmt_avg_10,0)*/  + -- платеж по самому кредиту (по траншу или 10% по картам)
                       coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    g.gcvp_salary * 100 / 5) * 5 -- доходы (ГЦВП)
              else round((coalesce(kp.monthly_pay, 0) + -- платеж со скоринга
                       coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0)) /
                   g.gcvp_salary * 100 / 5) * 5
              end
          end as kdn_gcvp,
       case when g.gcvp_salary > 0 then
               round((/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                         coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                         coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    g.gcvp_salary * 100 / 5) * 5 -- доходы (ГЦВП)
            end as kdn_gcvp_wo_pmt,
       g.gcvp_salary as gcvp_income,


       coalesce(null, 0) pmt_avg,
       coalesce(null, 0) pmt_avg_10,
       coalesce(kc.kaspi_other_cards_pmt, 0) kaspi_other_cards_pmt,
       coalesce(kr.kaspi_other_creds_pmt, 0) kaspi_other_creds_pmt,
       coalesce(p2.pkb_pmt_not_kaspi, 0) pkb_pmt_not_kaspi,
       coalesce(kp.monthly_pay, 0) sc_pmt_rbo,

       coalesce(kf.inc_all2, 0) form_income_total,
       coalesce(g.gcvp_salary, 0) gcvp_salary,


       cast(null as number) as pmt_nom_rate,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               (coalesce(kp.monthly_pay,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            else (coalesce(kp.monthly_pay, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100
            end
       end as kdn_form_gcvp_max_nm,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
            case when f.is_credit_issued = 'КРЕДИТ ВЫДАН' then
               (coalesce(kp.monthly_pay,0) -- платеж по самому кредиту (по траншу или 10% по картам)
                     + coalesce(kc.kaspi_other_cards_pmt,0) +
                       coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                       coalesce(p2.pkb_pmt_not_kaspi,0))  / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            else (coalesce(kp.monthly_pay, 0) +
                        coalesce(kc.kaspi_other_cards_pmt,0) +
                        coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                        coalesce(p2.pkb_pmt_not_kaspi,0)) /
                      coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100
            end
       end as kdn_form_gcvp_max_nm2,

       case when coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) > 0 then
               (/*coalesce(kp.pmt_avg,0) + \*coalesce(kp.pmt_avg_07,0) +*\ coalesce(kp.pmt_avg_10,0) +*/ -- платеж по самому кредиту (по траншу или 10% по картам)
                      coalesce(kc.kaspi_other_cards_pmt,0) + coalesce(kr.kaspi_other_creds_pmt,0) + -- другие кредиты каспи
                      coalesce(p2.pkb_pmt_not_kaspi,0)) / -- платежи ПКБ не каспи
                    coalesce(greatest(kf.inc_all2, g.gcvp_salary), kf.inc_all2, g.gcvp_salary) * 100 -- доходы (макс с анкеты и ГЦВП)
            end as kdn_form_gcvp_max_wo_pmt_nm,

       sv.salary_double


from (
/*  select 'ОНЛАЙН-КРЕДИТ' as product_type, 'ОНЛАЙН-КРЕДИТ ЭКТ' as product, trunc(f.folder_date_create_mi) as a_date,
         case when f.is_categ_a = 1 then 'КАТЕГОРИЯ А' when f.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when f.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when f.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when f.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when f.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when f.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when f.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         f.claim_id, f.contract_number, f.rfo_client_id, f.contract_amount, f.folder_id, f.form_client_id, f.rfo_contract_id,
         f.rfo_contract_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL f
  where f.process_name = 'ОНЛАЙН КРЕДИТ' and
        f.claim_id is not null and
        f.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd') --to_date('2014-12-08','yyyy-mm-dd')
  union all*/
  select 'ОНЛАЙН-КРЕДИТ' as product_type, 'ОНЛАЙН-КРЕДИТ ЭКТ' as product, trunc(fo.folder_date_create_mi) as a_date,
         case when fo.is_categ_a = 1 then 'КАТЕГОРИЯ А' when fo.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when fo.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when fo.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when fo.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when fo.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when fo.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when fo.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         fo.claim_id, fo.contract_number, fo.rfo_client_id, fo.contract_amount, fo.folder_id, fo.form_client_id, fo.rfo_contract_id,
         fo.claim_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL_ONLINE fo
  where fo.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd') --to_date('2014-12-08','yyyy-mm-dd')
  /*union all
  select f.product_type, f.cr_program_name as product, trunc(f.folder_date_create_mi) as a_date,
         case when f.is_categ_a = 1 then 'КАТЕГОРИЯ А' when f.is_categ_a = 0 then 'НЕ КАТЕГОРИЯ А' end as is_categ_a,
         --case when f.is_categ_b = 1 then 'КАТЕГОРИЯ Б' when f.is_categ_b = 0 then 'НЕ КАТЕГОРИЯ Б' end as is_categ_b,
         case when f.is_client_new_by_con = 1 then 'КЛИЕНТ НОВЫЙ' when f.is_client_new_by_con = 0 then 'КЛИЕНТ ПОВТОРНЫЙ' end as is_client_new_by_con,
         case when f.is_credit_issued = 1 then 'КРЕДИТ ВЫДАН' when f.is_credit_issued = 0 then 'КРЕДИТ НЕ ВЫДАН' end as is_credit_issued,
         f.claim_id, f.contract_number, f.rfo_client_id, f.contract_amount, f.folder_id, f.form_client_id, f.rfo_contract_id,
         f.rfo_contract_id as rfo_con_or_claim_id
  from U1.M_FOLDER_CON_CANCEL f
  where f.process_name != 'ОНЛАЙН КРЕДИТ' and
        f.folder_date_create_mi >= to_date('2013-01-01','yyyy-mm-dd')*/
) f
/*left join U1.M_RBO_CONTRACT_BAS b on b.folder_id_first = f.folder_id and b.contract_number = f.contract_number
left join U1.M_RBO_CONTRACT_DEL d on d.rbo_contract_id = b.rbo_contract_id*/
---
--left join U1.V_FORM_CLIENT_ALL_RFO fc on fc.form_client_id = f.form_client_id --
left join U1.M_MATRIX_KDN_1_PKB_1_ONL p1 on p1.claim_id = f.claim_id
left join U1.M_MATRIX_KDN_1_PKB_2_ONL p2 on p2.claim_id = f.claim_id
left join U1.M_MATRIX_KDN_1_GCVP_ONL g on g.claim_id = f.claim_id
--left join U1.M_MATRIX_KDN_1_FORM_ONL kf on kf.claim_id = f.claim_id
left join U1.M_APP_MINER_FORM_CLIENT kf on kf.app_id = f.claim_id
left join U1.M_MATRIX_KDN_1_KAS_CARDS_ONL kc on kc.claim_id = f.claim_id
left join U1.M_MATRIX_KDN_1_KAS_CREDS_ONL kr on kr.claim_id = f.claim_id
left join u1.M_FOLDER_CON_CANCEL_ONLINE_1 kp on kp.claim_id = f.claim_id
--left join U1.M_MATRIX_KDN_1_PMT kp on kp.rfo_contract_id = f.rfo_contract_id
left join U1.T_SALARY_AVERAGE sv on sv.ym_date = trunc(f.a_date,'mm')
/*left join (select pmt1.folder_id,
                  max(pmt1.sc_pmt_nom_rate) keep (dense_rank last order by pmt1.date_create) as sc_pmt_nom_rate,
                  max(pmt1.sc_pmt_rbo) keep (dense_rank last order by pmt1.date_create) as sc_pmt_rbo
           from u1.M_FOLDER_MO_PMT pmt1
           group by pmt1.folder_id) pmt on pmt.folder_id = f.folder_id
left join U1.M_MATRIX_KDN_1_PMT_NR pnm on pnm.rfo_contract_id = f.rfo_contract_id*/;

