create materialized view U1.M_TMP_J_DEL_X1
refresh force on demand
as
select --c.yy_mm_start_last,
       fc.x_dnp_name,
       count(distinct fc.rfo_client_id) as cli_all_cnt,
    -- ПРОВЕРКА
    count(fc.rfo_contract_id) as fld_con_cnt,
    count(*) as con_cnt, count(distinct c.contract_id) as con_dist_cnt, -- проверка - если эти два поля равны, значит выборка верна
    -- ПРОДАЖИ
    round(sum(c.max_debt_used)/1000000) as sales_mln, -- продажи
    -- ПРОСРОЧКА
    round(sum(c.delinq_rate_b_w * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_b_w, -- USE THIS! - просрочка всего по-новому --- ДЛЯ ОТЧЕТА!!!!!!!!

    round(count(distinct case when c.is_bad = 1 then c.contract_id end)/
                      count(distinct c.contract_id) * 100,1) as del_rate_b_w_by_quant, -- USE THIS! - просрочка всего по-новому --- ДЛЯ ОТЧЕТА!!!!!!!! (на будущее)

    round(sum(c.delinq_rate * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate, -- просрочка всего по-старому
    round(sum(c.delinq_rate_pmt_1 * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_pmt_1, -- USE THIS! - просрочка 1-го платежа
    round(sum(c.delinq_rate_npl * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_npl -- USE THIS! - просрочка по NPL (>=90 days)
/*    round(sum(c.delinq_rate_b * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_b, -- просрочка по BAD клиентам
    round(sum(c.delinq_rate_w * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_w, -- просрочка по WATCH клиентам
    round(sum(c.delinq_rate_g * c.max_debt_used) / sum(c.max_debt_used),1) as del_rate_g, -- просрочка по GOOD клиентам*/
/*
    round(sum(c.delinq_rate_by_amount * cc.contract_amount_max) / sum(cc.contract_amount_max),1) as del_rate_by_amount, -- просрочка всего по-старому по сумме договора
    round(sum(c.delinq_rate_by_amount_new * cc.contract_amount_max) / sum(cc.contract_amount_max),1) as del_rate_by_amount_new -- просрочка всего по-старому по сумме договора
*/
from M_CONTRACT_CAL_DEL c
join M_FOLDER_CON_CANCEL fc on fc.folder_id = c.folder_id_first and
                               fc.contract_number = c.contract_number
join V_CONTRACT_CAL cc on cc.contract_number = c.contract_number and
     cc.is_refin_restruct_first != 1
where not exists (select null from M_FOLDER_CON_CANCEL f
                  where f.folder_id = c.folder_id_first and f.is_refin = 1) and
--      fc.cr_program_name in ('КРЕДИТ НАЛИЧНЫМИ') and
--      cc.product_first = 'КН' and
      fc.cr_program_name in ('КРЕДИТ НАЛИЧНЫМИ','КРЕДИТ НАЛИЧНЫМИ ПОВТОРНИКУ',
                            'КРЕДИТ НАЛИЧНЫМИ 15 МИНУТ','ЛУЧШИЙ КЛИЕНТ – НАЛИЧНЫЕ') and
--      c.yy_mm_start_last = '2014 - 02'
      to_char(fc.folder_date_create_mi,'yyyy-mm') in ('2014-01','2014-02')
group by fc.x_dnp_name
--group by c.yy_mm_start_last
--group by ceil(t.contract_amount/1000)*1000
having sum(c.max_debt_used) > 0;
grant select on U1.M_TMP_J_DEL_X1 to LOADDB;
grant select on U1.M_TMP_J_DEL_X1 to LOADER;


