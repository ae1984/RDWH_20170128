create materialized view U1.M_TMP_DI_LK2
refresh force on demand
as
select

c.yy_mm_start_last,
c.product_start_last,
p.prod_type,
p.prod_name,
count(*) as con_cnt, count(distinct c.contract_number) as con_dist_cnt,
round(sum(c.max_debt_used)/1000000) as sales_mln, -- продажи
sum(c.max_debt_used) as sales, -- продажи
sum(c.delinq_rate_pmt_1 * c.max_debt_used) as del_rate_pmt_1,
sum(c.delinq_rate_b_w * c.max_debt_used) as del_rate_b_w,
sum(c.delinq_rate_b * c.max_debt_used) as del_rate_b,
sum(c.delinq_rate_w * c.max_debt_used) as del_rate_w,
sum(c.delinq_rate_g * c.max_debt_used) as del_rate_g,
sum(c.delinq_rate_npl * c.max_debt_used) as del_rate_npl,
sum(c.delinq_rate * c.max_debt_used) as del_rate,
sum(c.max_debt_used) as total_used_sum,
sum(case when c.yy_mm_start_last_date <= add_months(sysdate,-6) then c.delinq_rate_b_w * c.max_debt_used end) as del_rate_b_w_tolerance,
sum(case when c.yy_mm_start_last_date <= add_months(sysdate,-6) then c.max_debt_used end) as total_used_sum_b_w_tolerance,   --b_w, считаем до -8 месяцев назад
count(distinct(case when c.yy_mm_start_last_date <= add_months(sysdate,-6) and c.delinq_rate_b_w>0 then c.contract_number end)) as b_w_tolerance_cnt,
count(distinct(case when c.yy_mm_start_last_date <= add_months(sysdate,-6) and c.max_debt_used>0 then c.contract_number end)) as total_b_w_tolerance_cnt,   --b_w, считаем до -8 месяцев назад
count(distinct(case when c.delinq_rate_pmt_1>0 then c.contract_number end)) as pmt_1_cnt,
count(distinct(case when c.max_debt_used_pmt_1>0 then c.contract_number end)) as max_debt_used_pmt_1,

count(distinct(case when c.delinq_rate_npl>0 then c.contract_number end)) as npl_cnt,

count(distinct(case when c.delinq_rate_pmt_2_x1>0 then c.contract_number end)) as delinq_rate_pmt_2_x1,
count(distinct(case when c.delinq_rate_pmt_2_01>0 then c.contract_number end)) as delinq_rate_pmt_2_01,
count(distinct(case when c.max_debt_used_pmt_2>0 then c.contract_number end)) as max_debt_used_pmt_2,


count(distinct(case when c.delinq_rate_pmt_3_xx1>0 then c.contract_number end)) as delinq_rate_pmt_3_xx1,
count(distinct(case when c.delinq_rate_pmt_3_001>0 then c.contract_number end)) as delinq_rate_pmt_3_001,
count(distinct(case when c.max_debt_used_pmt_3>0 then c.contract_number end)) as max_debt_used_pmt_3,

count(distinct(case when c.delinq_rate_pmt_4_xxx1>0 then c.contract_number end)) as delinq_rate_pmt_4_xxx1,
count(distinct(case when c.delinq_rate_pmt_4_0001>0 then c.contract_number end)) as delinq_rate_pmt_4_0001,
count(distinct(case when c.max_debt_used_pmt_4>0 then c.contract_number end)) as max_debt_used_pmt_4,

count(distinct(case when c.delinq_rate_pmt_5_xxxx1>0 then c.contract_number end)) as delinq_rate_pmt_5_xxxx1,
count(distinct(case when c.delinq_rate_pmt_5_00001>0 then c.contract_number end)) as delinq_rate_pmt_5_00001,
count(distinct(case when c.max_debt_used_pmt_5>0 then c.contract_number end)) as max_debt_used_pmt_5,

count(distinct(case when c.delinq_rate_pmt_6_xxxxx1>0 then c.contract_number end)) as delinq_rate_pmt_6_xxxxx1,
count(distinct(case when c.delinq_rate_pmt_6_000001>0 then c.contract_number end)) as delinq_rate_pmt_6_000001,
count(distinct(case when c.max_debt_used_pmt_6>0 then c.contract_number end)) as max_debt_used_pmt_6,

count(distinct(case when c.max_debt_used>0 then c.contract_number end)) as total_cnt,

sum(c.delinq_rate_pmt_2_01*c.max_debt_used) as pmt_2_01_sum,
sum(c.delinq_rate_pmt_3_001*c.max_debt_used) as pmt_3_001_sum,
sum(c.delinq_rate_pmt_4_0001*c.max_debt_used) as pmt_4_0001_sum,
sum(c.delinq_rate_pmt_5_00001*c.max_debt_used) as pmt_5_00001_sum,
sum(c.delinq_rate_pmt_6_000001*c.max_debt_used) as pmt_6_000001_sum

from M_CONTRACT_CAL_DEL c
join V_CLIENT_CAL_TEST t on c.client_id=t.client_id and best_client=1
join v_dwh_portfolio_current p on c.contract_number=p.deal_number
join V_CONTRACT_CAL ccc on ccc.contract_number = c.contract_number and
     ccc.is_refin_restruct_first != 1
where not exists (select null from M_FOLDER_CON_CANCEL f
                  where f.folder_id = c.folder_id_first and f.is_refin = 1)
group by c.yy_mm_start_last,c.product_start_last,
p.prod_type,
p.prod_name
having sum(c.max_debt_used) > 0;
grant select on U1.M_TMP_DI_LK2 to LOADDB;
grant select on U1.M_TMP_DI_LK2 to LOADER;


