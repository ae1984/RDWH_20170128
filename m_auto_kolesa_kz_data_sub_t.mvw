create materialized view U1.M_AUTO_KOLESA_KZ_DATA_SUB_T
build deferred
refresh force on demand
as
select         s.akk_id,
               s.akk_active_bool,
               s.akk_last_date_categ,
               s.akk_brend,
               s.akk_model,
               s.akk_year_car,
               s.akk_drive,
               s.akk_engine_volume,
               s.akk_kpp_type,
               s.akk_body_type,
               s.akk_fuel,
               s.akk_price,
               s.count_price_confidence,
               advert_cnt, --кол-во объявлений по комбинации
               round(avg(s.akk_price) over(partition by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type),0) as avg_price,
               round(avg(s.akk_price) over(partition by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type, s.akk_last_date_categ),0) as avg_price1,
               count(*) over (partition by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type) as adv_count,
               count(*) over (partition by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type, s.akk_last_date_categ) as adv_count1,

               dense_rank() over (partition by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type order by /*s.akk_price*/round(s.akk_price, -5) ) as akk_data_price_id,
               dense_rank() over (order by s.akk_brend, s.akk_model, s.akk_drive, s.akk_engine_volume, s.akk_body_type)  as akk_sub_id,
               dense_rank() over (order by s.akk_brend, s.akk_model, s.akk_year_car, s.akk_drive, s.akk_engine_volume, s.akk_kpp_type, s.akk_body_type)  as akk_data_id
          from (select f.akk_id,
                       f.akk_active_bool,
                       f.akk_last_date_categ,
                       f.akk_brend,
                       f.akk_model,
                       f.akk_year_car,
                       f.akk_drive,
                       f.akk_engine_volume,
                       f.akk_kpp_type,
                       f.akk_body_type,
                       f.akk_fuel,
                       f.akk_price,
                       median(f.akk_price) over(partition by f.akk_brend, f.akk_model, f.akk_year_car, f.akk_drive, f.akk_engine_volume, f.akk_kpp_type, f.akk_body_type) as median,
                       stddev(f.akk_price) over(partition by f.akk_brend, f.akk_model, f.akk_year_car, f.akk_drive, f.akk_engine_volume, f.akk_kpp_type, f.akk_body_type) as std,
                       (case
                         when count(f.akk_price) over(partition by f.akk_brend, f.akk_model, f.akk_year_car, f.akk_drive, f.akk_engine_volume, f.akk_kpp_type, f.akk_body_type) >= 10 then
                          1
                         else
                          0
                       end) as count_price_confidence,
                       count(f.akk_price) over(partition by f.akk_brend, f.akk_model, f.akk_year_car, f.akk_drive, f.akk_engine_volume, f.akk_kpp_type, f.akk_body_type) as advert_cnt
                  from (select d.akk_id,
                               d.akk_active_bool,
                               d.akk_last_date_categ,
                               d.akk_brend,
                               d.akk_model,
                               d.akk_year_car,
                               d.akk_drive,
                               d.akk_engine_volume,
                               d.akk_kpp_type,
                               d.akk_body_type,
                               d.akk_fuel,
                               d.akk_price
                          from (select t.akk_id,
                                       t.akk_active_bool,
                                       t.akk_last_date_categ,
                                       t.akk_brend,
                                       t.akk_model,
                                       t.akk_year_car,
                                       t.akk_drive,
                                       t.akk_engine_volume,
                                       t.akk_kpp_type,
                                       t.akk_body_type,
                                       t.akk_fuel,
                                       t.akk_price,
                                       median(t.akk_price) over(partition by t.akk_brend, t.akk_model, t.akk_year_car, t.akk_drive, t.akk_engine_volume, t.akk_kpp_type, t.akk_body_type) as median1
                                  from M_AUTO_KOLESA_KZ_DATA_PRE_T t
                                  ) d
                         where (abs(d.akk_price - d.median1) = 0 or
                               (abs(d.akk_price - d.median1) / d.median1) * 100 <= 50)
                        ) f
                 ) s
         where abs(s.akk_price - s.median) < s.std;
grant select on U1.M_AUTO_KOLESA_KZ_DATA_SUB_T to LOADDB;


